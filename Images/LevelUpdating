package scripts;

import com.stencyl.graphics.G;
import com.stencyl.graphics.BitmapWrapper;
import com.stencyl.graphics.ScaleMode;

import com.stencyl.behavior.Script;
import com.stencyl.behavior.Script.*;
import com.stencyl.behavior.ActorScript;
import com.stencyl.behavior.SceneScript;
import com.stencyl.behavior.TimedTask;

import com.stencyl.models.Actor;
import com.stencyl.models.GameModel;
import com.stencyl.models.actor.Animation;
import com.stencyl.models.actor.ActorType;
import com.stencyl.models.actor.Collision;
import com.stencyl.models.actor.Group;
import com.stencyl.models.Scene;
import com.stencyl.models.Sound;
import com.stencyl.models.Region;
import com.stencyl.models.Font;
import com.stencyl.models.Joystick;

import com.stencyl.Config;
import com.stencyl.Engine;
import com.stencyl.Input;
import com.stencyl.Key;
import com.stencyl.utils.motion.*;
import com.stencyl.utils.Utils;

import openfl.ui.Mouse;
import openfl.display.Graphics;
import openfl.display.BlendMode;
import openfl.display.BitmapData;
import openfl.display.Bitmap;
import openfl.events.Event;
import openfl.events.KeyboardEvent;
import openfl.events.TouchEvent;
import openfl.net.URLLoader;

import box2D.common.math.B2Vec2;
import box2D.dynamics.B2Body;
import box2D.dynamics.B2Fixture;
import box2D.dynamics.joints.B2Joint;
import box2D.collision.shapes.B2Shape;

import com.stencyl.graphics.shaders.BasicShader;
import com.stencyl.graphics.shaders.GrayscaleShader;
import com.stencyl.graphics.shaders.SepiaShader;
import com.stencyl.graphics.shaders.InvertShader;
import com.stencyl.graphics.shaders.GrainShader;
import com.stencyl.graphics.shaders.ExternalShader;
import com.stencyl.graphics.shaders.InlineShader;
import com.stencyl.graphics.shaders.BlurShader;
import com.stencyl.graphics.shaders.SharpenShader;
import com.stencyl.graphics.shaders.ScanlineShader;
import com.stencyl.graphics.shaders.CSBShader;
import com.stencyl.graphics.shaders.HueShader;
import com.stencyl.graphics.shaders.TintShader;
import com.stencyl.graphics.shaders.BloomShader;



class SceneEvents_0 extends SceneScript
{
	
	
	public function new(dummy:Int, dummy2:Engine)
	{
		super();
		
	}
	
	override public function init()
	{
		
		/* ======================== When Updating ========================= */
		addWhenUpdatedListener(null, function(elapsedTime:Float, list:Array<Dynamic>):Void
		{
			if(wrapper.enabled)
			{
				if((getActor(4).getX() < 100))
				{
					getActor(4).setY((getActor(5).getY() + 45));
				}
				if((getActor(3).getX() < 0))
				{
					getActor(3).setX(600);
					getActor(3).setXVelocity(randomInt(-12, -22));
				}
				if((getActor(2).getX() < 0))
				{
					getActor(2).setX(600);
					getActor(2).setXVelocity(randomInt(-15, -20));
				}
			}
		});
		
		/* ======================== Specific Actor ======================== */
		addCollisionListener(getActor(4), function(event:Collision, list:Array<Dynamic>):Void
		{
			if(wrapper.enabled && (getActor(3) == event.otherActor))
			{
				getActor(4).setX(getActor(5).getX());
				getActor(3).setX(600);
				getActor(4).setXVelocity(0);
				getActor(3).setXVelocity(randomInt(-15, -20));
				Engine.engine.setGameAttribute("score", ((Engine.engine.getGameAttribute("score") : Float) + 1));
			}
		});
		
		/* ======================== Specific Actor ======================== */
		addActorPositionListener(getActor(4), function(enteredScreen:Bool, exitedScreen:Bool, enteredScene:Bool, exitedScene:Bool, list:Array<Dynamic>):Void
		{
			if(wrapper.enabled && exitedScreen)
			{
				getActor(4).setX(getActor(5).getX());
				getActor(4).setXVelocity(0);
			}
		});
		
		/* ========================= When Drawing ========================= */
		addWhenDrawingListener(null, function(g:G, x:Float, y:Float, list:Array<Dynamic>):Void
		{
			if(wrapper.enabled)
			{
				g.drawString("" + (Engine.engine.getGameAttribute("score") : Float), 20, 20);
				if(engine.isPaused())
				{
					g.drawString("" + "Game Over!", 250, 250);
				}
			}
		});
		
		/* ======================== Specific Actor ======================== */
		addCollisionListener(getActor(4), function(event:Collision, list:Array<Dynamic>):Void
		{
			if(wrapper.enabled && (getActor(2) == event.otherActor))
			{
				getActor(4).setX(getActor(5).getX());
				getActor(2).setX(600);
				getActor(4).setXVelocity(0);
				getActor(2).setXVelocity(randomInt(-15, -20));
				Engine.engine.setGameAttribute("score", ((Engine.engine.getGameAttribute("score") : Float) + 1));
			}
		});
		
		/* ======================== Actor of Type ========================= */
		addCollisionListener(getActor(5), function(event:Collision, list:Array<Dynamic>):Void
		{
			if(wrapper.enabled && sameAsAny(getActorType(2), event.otherActor.getType(),event.otherActor.getGroup()))
			{
				engine.pause();
				startShakingScreen(25 / 100, 3);
			}
		});
		
	}
	
	override public function forwardMessage(msg:String)
	{
		
	}
}
